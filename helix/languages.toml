# https://docs.helix-editor.com/languages.html
# https://github.com/helix-editor/helix/blob/master/languages.toml
# https://github.com/helix-editor/helix/wiki/Language-Server-Configurations

[language-server.bash-language-server]
command = "bash-language-server"
args    = ["start"]

[language-server.rust-analyzer]
command = "rust-analyzer"

  [language-server.rust-analyzer.config]
  check.command  = "clippy"
  cargo.features = "all"

[language-server.pylyzer]
command = "pylyzer"
args    = ["--server"]

[language-server.ruff]
command = "ruff"
args    = ["server", "-q", "--preview"]

  [language-server.ruff.environment]
  RUFF_TRACE = "messages"

  [language-server.ruff.config.settings]
  format.preview = true
  lint.preview   = true
  logLevel       = "debug"
  run            = "onSave"

[language-server.basedpyright]
command = "basedpyright-langserver"
args    = ["--stdio"]

  [language-server.basedpyright.config.basedpyright]
  disableOrganizeImports = true

    [language-server.basedpyright.config.basedpyright.analysis]
    diagnosticMode          = "workspace"
    typeCheckingMode        = "off" # using ruff for type checking, basedpyright is just for lsp
    inlayHints.genericTypes = true

[language-server.taplo]
command = "taplo"
args    = ["lsp", "stdio"]

[language-server.yaml-language-server]
command = "yaml-language-server"
args    = ["--stdio"]

[language-server.pylsp]
command = "pylsp"

  [language-server.pylsp.config.pylsp]
  plugins.black.enabled           = false
  plugins.isort.enabled           = true
  plugins.pyflakes.enabled        = true
  plugins.pylint.enabled          = true
  plugins.pyls_mypy.enabled       = false
  plugins.pyls_mypy.live_mode     = false
  plugins.pylsp_mypy.dmypy        = false
  plugins.rope_autoimport.enabled = false
  plugins.ruff.enabled            = true
  plugins.ruff.formatEnabled      = true
  plugins.ruff.preview            = true

[language-server.sql-language-server]
command = "sql-language-server"
args    = ["up", "--method", "stdio"]

[language-server.lua-language-server]
command = "lua-language-server"

  [language-server.lua-language-server.config.Lua]
  "workspace.useGitIgnore" = false
  "hint.enable"            = true
  "hint.arrayIndex"        = "Enable"
  "hint.setType"           = true
  "hint.paramName"         = "All"
  "hint.paramType"         = true
  "hint.await"             = true

[language-server.codebook]
command = "codebook-lsp"
args    = ["serve"]

[language-server.tailwindcss-ls]
command = "tailwindcss-language-server"
args    = ["--stdio"]

  [language-server.tailwindcss-ls.config]
  userLanguages = { rust = "html", "*.rs" = "html" }

[language-server.typescript-language-server]
command = "typescript-language-server"
args    = ["--stdio"]

  [language-server.typescript-language-server.config]
  hostInfo = "helix"

# copy of `vscode-json-language-server` for formatting json5/jsonc
# except with validation set to false disabled.
[language-server.vscode-json-language-server-no-validate]
command = "vscode-json-language-server"
args    = ["--stdio"]

  [language-server.vscode-json-language-server-no-validate.config]
  provideFormatter     = true
  json.validate.enable = false

[[language]]
name             = "python"
shebangs         = ["python", "uv"]
language-servers = ["ruff", "basedpyright"] # "ty", "pylsp", "pylyzer"
indent           = { tab-width = 4, unit = "    " }
auto-format      = true

  [language.formatter]
  command = "bash"
  args = ["-c", """
  ruff check --fix --silent --stdin-filename '%sh{realpath '%{buffer_name}'}' -- - \
    | ruff format --stdin-filename '%sh{realpath '%{buffer_name}'}' -- -
  """]

[[language]]
name                          = "rust"
shebangs                      = ["rust-script", "cargo"]
auto-format                   = true
language-servers              = ["rust-analyzer", "tailwindcss-ls"]
indent                        = { tab-width = 4, unit = "    " }
persistent-diagnostic-sources = ["rustc", "clippy"]

  [language.formatter]
  command = "rustfmt"
  args    = ["+nightly"]

[[language]]
name             = "env"
language-servers = ["bash-language-server"]
indent           = { tab-width = 2, unit = "  " }
grammar          = "bash"

[[language]]
name             = "xit"
indent           = { tab-width = 4, unit = "    " }
language-servers = ["codebook"]
auto-format      = true

  [language.formatter]
  command = "bash"
  args    = ["-c", "xit-sort"] # custom script in ~/bin/

[[language]]
name        = "csv"
file-types  = ["csv"]
scope       = "source.csv"
auto-format = false

  [language.formatter]
  command = "bash"
  args    = ["-c", "align-csv-columns<&0"] # custom script in ~/bin/

[[language]]
name             = "markdown"
soft-wrap.enable = true
text-width       = 200
language-servers = ["markdown-oxide", "marksman", "codebook"]
indent           = { tab-width = 4, unit = "    " }
auto-format      = true

  [language.formatter]
  command = "prettier"
  args    = ["--parser=markdown", "--stdin-filename", "%{buffer_name}"]

[[language]]
name             = "text"
scope            = "source.text"
indent           = { tab-width = 2, unit = "  " }
file-types       = ["txt"]
language-servers = ["codebook"]

# Following language is to provide auto-formatting for mermaid gantt charts.
# File types is intentionally left blank, so files with  `.mermaid` or `.mmd`
# exts will still default to the mermaid lang.
# Run the command `:lang gantt` to enable auto formatting.
# Repo for formatter: https://github.com/ayvi-0001/mermaid-gantt-formatter
# Must run following command first:
# $ mkdir -p "$HELIX_RUNTIME/queries/gantt" && echo '; inherits: mermaid' > "$HELIX_RUNTIME/queries/gantt/highlights.scm"
[[language]]
name            = "gantt"
scope           = "source.mermaid"
injection-regex = "mermaid"
file-types      = []
indent          = { tab-width = 2, unit = "  " }
auto-format     = true
comment-token   = "%%"
grammar         = "mermaid"

  [language.formatter]
  command = "mmdc-fmt"
  args    = ["-t", "gantt", "-i", "-"]

[[language]]
name   = "mermaid"
indent = { tab-width = 2, unit = "  " }

[[language]]
name             = "sql"
file-types       = ["sql", "dsql", "sqlx"]
indent           = { tab-width = 2, unit = "  " }
language-servers = ["sql-language-server"]
auto-format      = false

  [language.formatter]
  command = "sqlfluff"
  args    = ["format", "-", "--stdin-filename", "%{buffer_name}"]

[[language]]
name             = "toml"
indent           = { tab-width = 2, unit = "  " }
language-servers = ["taplo"]
auto-format      = true

  [language.formatter]
  command = "taplo"
  args    = ["format", "-", "--stdin-filepath", "%{buffer_name}"]

[[language]]
name             = "lua"
shebangs         = ["lua", "luajit"]
indent           = { tab-width = 2, unit = "  " }
language-servers = ["lua-language-server"]
auto-format      = true

  [language.formatter]
  command = "stylua"
  args    = ["--search-parent-directories", "-", "--stdin-filepath", "%{buffer_name}"]

# Must run following command first:
# $ mkdir -p "$HELIX_RUNTIME/queries/filter" && echo '; inherits: git-ignore' > "$HELIX_RUNTIME/queries/filter/highlights.scm"
[[language]]
name            = "filter"
scope           = "source.filter"
injection-regex = "filter"
file-types      = [{ glob = "*.*filter" }]
comment-token   = "#"
grammar         = "gitignore"

[[language]]
name        = "yaml"
auto-format = true

  [language.formatter]
  command = "yamlfmt"
  args    = ["-"]

[[language]]
name             = "typescript"
language-servers = ["vscode-eslint-language-server", "tailwindcss-ls", "typescript-language-server"]
auto-format      = true

  [language.formatter]
  command = "prettier"
  args    = ["--parser=typescript", "--stdin-filepath", "%{buffer_name}"]

[[language]]
name             = "tsx"
language-servers = ["vscode-eslint-language-server", "tailwindcss-ls", "typescript-language-server"]
auto-format      = true

  [language.formatter]
  command = "prettier"
  args    = ["--parser=typescript", "--stdin-filepath", "%{buffer_name}"]

[[language]]
name             = "javascript"
language-servers = ["vscode-eslint-language-server", "tailwindcss-ls", "typescript-language-server"]
auto-format      = true

  [language.formatter]
  command = "prettier"
  args    = ["--parser=typescript", "--stdin-filepath", "%{buffer_name}"]

[[language]]
name             = "jsx"
language-servers = ["vscode-eslint-language-server", "tailwindcss-ls", "typescript-language-server"]
auto-format      = true

  [language.formatter]
  command = "prettier"
  args    = ["--parser=typescript", "--stdin-filepath", "%{buffer_name}"]

[[language]]
name             = "html"
language-servers = ["vscode-html-language-server", "tailwindcss-ls"]

[[language]]
name        = "xml"
auto-format = true

  [language.formatter]
  command = "prettier"
  args    = ["--parser=html", "--stdin-filepath", "%{buffer_name}"]

[[language]]
name             = "css"
file-types       = ["css", "scss", "tcss"]
language-servers = ["vscode-css-language-server", "tailwindcss-ls"]

[[language]]
name             = "json5"
auto-format      = true
language-servers = ["vscode-json-language-server-no-validate"]
indent           = { tab-width = 2, unit = "  " }

[[language]]
name             = "jsonc"
auto-format      = true
language-servers = ["vscode-json-language-server-no-validate"]
indent           = { tab-width = 2, unit = "  " }

[[grammar]]
name       = "xit"
source.git = "https://github.com/synaptiko/tree-sitter-xit"
source.rev = "a4fad351bfa5efdcb379b40c36671413fbe9caac"

[[grammar]]
name       = "mermaid"
source.git = "https://github.com/monaqa/tree-sitter-mermaid"
source.rev = "90ae195b31933ceb9d079abfa8a3ad0a36fee4cc"

[[grammar]]
name       = "lua"
source.git = "https://github.com/tree-sitter-grammars/tree-sitter-lua"
source.rev = "4569d1c361129e71a205b94a05e158bd71b1709f"

[[grammar]]
name       = "csv"
source.git = "https://github.com/weartist/rainbow-csv-tree-sitter"
source.rev = "fbf125bcedb15080980e8afaf69c4374412e5844"
