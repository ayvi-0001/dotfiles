#!/usr/bin/env -S uv run --script
# /// script
# requires-python = ">=3.12"
# ///

import sys
import typing as t
from collections.abc import Callable, Iterable, Iterator

STDIN: t.TextIO = sys.stdin
STDIN_TEXT: str = STDIN.read()

if not STDIN_TEXT:
    sys.exit(1)


def unique_everseen[T](
    iterable: Iterable[T],
    key_iterable: Callable[[T], T] | None = None,
    key_yield: Callable[[T], T] | None = None,
) -> Iterator[T]:
    unique: set[T] = set()

    if key_iterable is not None and key_yield is not None:
        for item in map(key_iterable, iterable):
            if item not in unique:
                unique.add(item)
                yield key_yield(item)
    else:
        for item in iterable:
            if item not in unique:
                unique.add(item)
                yield item


def main(stdin_text: str) -> None:
    lines: list[str] = stdin_text.splitlines()

    # trailing whitespace removed, but leading whitespace preserved.
    # remove/update key_iterable to change behaviour
    unique_lines: Iterable[str] = unique_everseen(
        iterable=lines[::-1],
        key_iterable=lambda i: i.rstrip(),
        key_yield=lambda y: f"{y}\n",
    )

    for line in list(unique_lines)[::-1]:
        sys.stdout.write(line)

    sys.exit(0)


if __name__ == "__main__":
    main(STDIN_TEXT)
