#!/usr/bin/env python

import sys
import typing as t
from collections.abc import Iterable, Iterator

T = t.TypeVar("T")

STDIN: t.TextIO = sys.stdin
stdin_text: str = STDIN.read()

if not stdin_text:
    sys.exit(1)


def unique_everseen(
    iterable: Iterable[T],
    key_iterable: t.Callable[..., T] | None = None,
    key_yield: t.Callable[..., T] | None = None,
) -> Iterator[T]:
    unique: set[T] = set()

    if key_iterable is not None and key_yield is not None:
        for item in map(key_iterable, iterable):
            if item not in unique:
                unique.add(item)
                yield key_yield(item)
    else:
        for item in iterable:
            if item not in unique:
                unique.add(item)
                yield item


lines: list[str] = stdin_text.splitlines(keepends=True)

unique_lines: Iterable[str] = unique_everseen(
    lines[::-1],
    lambda l: l.rstrip("\n").strip(),
    lambda l: f"{l}\n",
)

for line in list(unique_lines)[::-1]:
    sys.stdout.write(line)

sys.exit(0)
